===============================================================================
Module : testbench
===============================================================================
SCORE  LINE   COND   TOGGLE 
 60.05  94.02   3.85  82.29 

Source File(s) : 

/afs/umich.edu/user/s/u/sunsusan/Desktop/group7w20/verilog/rs_test.sv

Module self-instances :

SCORE  LINE   COND   TOGGLE NAME      
 60.05  94.02   3.85  82.29 testbench 



-------------------------------------------------------------------------------
Line Coverage for Module : testbench

             Line No.   Total   Covered  Percent
TOTAL                      117      110    94.02
ALWAYS            105       11        7    63.64
ROUTINE           189       35       35   100.00
ROUTINE           216        5        2    40.00
ALWAYS            243        1        1   100.00
ALWAYS            248       35       35   100.00
ALWAYS            330        3        3   100.00
INITIAL           340       27       27   100.00

104                         always_comb begin           // Logic to determine if output is correct. If correct == 0, module is wrong!
105        1/1                  correct = 1'b1;
106        1/1                  if(ready) begin
107        1/2     ==>              if(is_free) correct = 1'b0;
108        1/1                      else if(dest_PRF_idx_out == dest_PRF_idx_in && rob_idx_out == rob_idx_in &&
109                                         PC_out == PC_in && Operation_out == Operation_in &&
110                                         offset_out == offset_in && rd_mem_out == rd_mem_in && wr_mem_out == wr_mem_in) begin
111        1/2     ==>                  if(opa_valid && opa_out != opa_in || !opa_valid && opa_out != CDB_Data[j]) correct = 1'b0;
                        MISSING_ELSE
112        1/2     ==>                  if(opb_valid && opb_out != opb_in || !opb_valid && opb_out != CDB_Data[k]) correct = 1'b0;
                        MISSING_ELSE
113        0/1     ==>              end else correct = 1'b0;    // If here, then one of the pass-throughs was changed
114        1/1                  end else correct = 1'b0;
115                         end
116                     
117                     /* 
118                      *                            END OF COMBINATIONAL LOGIC
119                      *
120                      * ============================================================================
121                      */
122                     
123                     
124                     
125                     
126                     
127                     /* ============================================================================
128                      *
129                      *                               MODULE INSTANCES
130                      * 
131                      */
132                     
133                         RS_Line rs_entry(
134                             clock,
135                             reset,
136                     
137                             CDB_Data,
138                             CDB_PRF_idx,
139                             CDB_valid,
140                     
141                             opa_in,
142                             opb_in,
143                             opa_valid,
144                             opb_valid,
145                             rd_mem_in,
146                             wr_mem_in,
147                             dest_PRF_idx_in,
148                             rob_idx_in,
149                     
150                             teststart, // high when dispatch
151                             offset_in,
152                             PC_in,
153                             Operation_in,
154                     
155                     
156                             ready,
157                             opa_out,
158                             opb_out,
159                             dest_PRF_idx_out,
160                             rob_idx_out,
161                             is_free,
162                     
163                             PC_out,
164                             Operation_out,
165                             offset_out,
166                             rd_mem_out,                        
167                             wr_mem_out                         
168                         );
169                     
170                     
171                     /* 
172                      *                            END OF MODULE INSTANCES
173                      *
174                      * ============================================================================
175                      */
176                     
177                     
178                     
179                     
180                     /* ============================================================================
181                      *
182                      *                               TESTBENCH TASKS
183                      * 
184                      */
185                     
186                     logic [3:0] wait_1;
187                     logic [3:0] wait_2;
188                         task new_test;
189        2/2                  @(negedge clock);
190        1/1                  assign reset = 1'b1;
191        2/2                  @(negedge clock);
192        1/1                  assign reset = 1'b0;
193        2/2                  @(negedge clock);
194        1/1                  assign teststart = 1'b1;
195        2/2                  @(negedge clock);
196        1/1                  assign teststart = 1'b0;
197        1/1                      assign wait_1 = $random % 10;
198        1/1                      assign wait_2 = $random % 10;
199        3/3                      repeat (wait_1) @(negedge clock);
                        REPEAT_FALSE
200        1/1                      CDB_valid[j] = 1'b1;
201        1/1                      $display("CDB_valid[%d] %h", j, CDB_valid[j]);
202        1/1                      $display("CDB_PRF_idx[%d] %h", j, CDB_PRF_idx[j]);
203        2/2                      @(negedge clock);
204        1/1                      CDB_valid[j] = 1'b0;
205        3/3                      repeat (wait_2) @(negedge clock);
                        REPEAT_FALSE
206        1/1                      CDB_valid[k] = 1'b1;
207        1/1                      $display("CDB_valid[%d] %h", k, CDB_valid[k]);
208        1/1                      $display("CDB_PRF_idx[%d] %h", k, CDB_PRF_idx[k]);
209        2/2                      @(negedge clock);
210        1/1                      CDB_valid[k] = 1'b0;
211        2/2                      @(negedge clock);
212        1/1                      check_correct;
213                         endtask
214                     
215                         task check_correct;
216        1/1                  #2
217        1/1                  if(!correct) begin
218        0/1     ==>              $display("@@@ Incorrect at time %4.0f", $time);
219        0/1     ==>              $display("@@@ Failed");
220        0/1     ==>              $finish;
221                             end
                        MISSING_ELSE
222                         endtask
223                     
224                     /* 
225                      *                            END OF TESTBENCH TASKS
226                      *
227                      * ============================================================================
228                      */
229                     
230                     
231                     
232                     
233                     
234                     
235                     /* ============================================================================
236                      *
237                      *                               SEQUENTIAL LOGIC
238                      * 
239                      */
240                     
241                     
242                         always_ff @(negedge clock) begin
243        1/1                  PC <= `SD  PC + `WAYS * 4;
244                         end
245                     
246                         always_ff @(posedge teststart) begin
247                     
248        1/1                  inst = $random;
249        1/1                  rs1_value = $random;
250        1/1                  rs2_value = $random;
251        1/1                  rs1_prn = $random;
252        1/1                  rs2_prn = $random;
253                     
254        1/1                  if(opa_valid) begin
255        1/1                      opa_in = {$random, $random};
256                             end else begin
257        1/1                      opa_in = {$clog2(`PRF){1'b1}} & $random;
258                             end
259        1/1                  $display("opa_in: %h", opa_in);
260                     
261        1/1                  if(opb_valid) begin
262        1/1                      opb_in = {$random, $random};
263                             end else begin
264        1/1                      opb_in = {$clog2(`PRF){1'b1}} & $random;
265                             end
266        1/1                  $display("opb_in: %h", opb_in);
267                     
268                     
269        1/1                  assign j = (($random & 4'hf) % `WAYS);
270        1/1                  $display("j: %h", j);
271        1/1                  assign k = ((j + 1) % `WAYS);
272        1/1                  $display("k: %h", k);
273                     
274                             
275        1/1                  for(int i = 0; i < `WAYS; i = i + 1)
276                             begin: foo
277        1/1                      CDB_Data[i] = {$random, $random};
278        1/1                      CDB_PRF_idx[i] = ~opa_valid && (i == j) ? opa_in :
279                                                  ~opb_valid && (i == k) ? opb_in : $random;
280        1/1                      $display("CDB_Data[%d]: %h", i, CDB_Data[i]);
281        1/1                      $display("CDB_PRF_idx[%d]: %h", i, CDB_PRF_idx[i]);
282                             end
283                             
284                     
285        1/1                  rd_mem_in = $random;
286        1/1                  wr_mem_in = $random;
287        1/1                  dest_PRF_idx_in = $random;
288        1/1                  rob_idx_in = $random;
289                             
290        1/1                  offset_in = $random;
291        1/1                  PC_in = $random;
292        1/1                  Operation_in = $random;
293                     
294        1/1                  if(opa_valid) begin
295        1/1                      opa_out_correct = opa_in;
296                             end else begin
297        1/1                      opa_out_correct = CDB_Data[j];
298                             end
299                     
300        1/1                  if(opb_valid) begin
301        1/1                      opb_out_correct = opb_in;
302                             end else begin
303        1/1                      opb_out_correct = CDB_Data[k];
304                             end
305                     
306                     
307                         end
308                     
309                     /* 
310                      *                            END OF SEQUENTIAL LOGIC
311                      *
312                      * ============================================================================
313                      */
314                     
315                     
316                     
317                     
318                     
319                     /* ============================================================================
320                      *
321                      *                               TESTBENCH DRIVER
322                      * 
323                      */
324                     
325                     
326                     	
327                     	// Generate System Clock
328                         // YANKED from the p3 testbench
329                     	always begin
330        2/2          		#(`VERILOG_CLOCK_PERIOD/2.0);
331        1/1          		clock = ~clock;
332                     	end
333                     	
334                     
335                         initial begin
336                             //$random(10);
337                     
338                     /* ========================= TESTS FOR ONE RS ENTRY ========================= */
339                     
340        1/1                  $display("start");
341        1/1                  $display("Time|reset|load_in|opa_in|opa_valid|opb_in|opb_valid|is_free|ready");
342        1/1                  $monitor("%4.0f  %b    %b     %h   %h   %h %h     %h     %h", $time, reset, teststart, opa_in,opa_valid,opb_in,opb_valid,is_free,ready);
343                     
344                     /* ------------------------- both operands are ready ------------------------- */
345        1/1                  opa_valid = 1'b1;
346        1/1                  opb_valid = 1'b1;
347                     
348        1/1                  clock = 1'b1;
349        1/1                  test_start = 1'b0;
350        2/2                  @(negedge clock);
351                     
352        2/2                  repeat (99) new_test();
                        REPEAT_FALSE
353                     
354                     /* ------------------------- only one operand is ready ------------------------- */
355        1/1                  opa_valid = 1'b0;
356                     
357        2/2                  @(negedge clock);
358                     
359        2/2                  repeat (45) new_test();
                        REPEAT_FALSE
360                     
361        1/1                  opa_valid = 1'b1;
362        1/1                  opb_valid = 1'b0;
363                     
364        2/2                  @(negedge clock);
365                     
366        2/2                  repeat (45) new_test();
                        REPEAT_FALSE
367                     
368                     /* ------------------------- neither operand is ready ------------------------- */
369        1/1                  opa_valid = 1'b0;
370                     
371        2/2                  repeat (99) new_test();
                        REPEAT_FALSE
372                     
373                     
374                     
375        1/1                  $display("@@@ Passed");
376        1/1                  $finish;

-------------------------------------------------------------------------------
Cond Coverage for Module : testbench

               Total   Covered  Percent
Conditions         26        1     3.85
Logical            26        1     3.85
Non-Logical         0        0
Event               0        0

 LINE       108
 EXPRESSION 
 Number  Term
      1  (dest_PRF_idx_out == dest_PRF_idx_in) && 
      2  (rob_idx_out == rob_idx_in) && 
      3  (PC_out == PC_in) && 
      4  (Operation_out == Operation_in) && 
      5  (offset_out == offset_in) && 
      6  (rd_mem_out == rd_mem_in) && 
      7  (wr_mem_out == wr_mem_in))

-1- -2- -3- -4- -5- -6- -7- Status
 0   1   1   1   1   1   1  Not Covered
 1   0   1   1   1   1   1  Not Covered
 1   1   0   1   1   1   1  Not Covered
 1   1   1   0   1   1   1  Not Covered
 1   1   1   1   0   1   1  Not Covered
 1   1   1   1   1   0   1  Not Covered
 1   1   1   1   1   1   0  Not Covered
 1   1   1   1   1   1   1  Covered

 LINE       111
 EXPRESSION ((opa_valid && (opa_out != opa_in)) || (((!opa_valid)) && (opa_out != CDB_Data[j])))
             -----------------1----------------    ----------------------2---------------------

-1- -2- Status
 0   0  Not Covered
 0   1  Not Covered
 1   0  Not Covered

 LINE       111
 SUB-EXPRESSION (opa_valid && (opa_out != opa_in))
                 ----1----    ---------2---------

-1- -2- Status
 0   1  Not Covered
 1   0  Not Covered
 1   1  Not Covered

 LINE       111
 SUB-EXPRESSION (((!opa_valid)) && (opa_out != CDB_Data[j]))
                 -------1------    ------------2-----------

-1- -2- Status
 0   1  Not Covered
 1   0  Not Covered
 1   1  Not Covered

 LINE       112
 EXPRESSION ((opb_valid && (opb_out != opb_in)) || (((!opb_valid)) && (opb_out != CDB_Data[k])))
             -----------------1----------------    ----------------------2---------------------

-1- -2- Status
 0   0  Not Covered
 0   1  Not Covered
 1   0  Not Covered

 LINE       112
 SUB-EXPRESSION (opb_valid && (opb_out != opb_in))
                 ----1----    ---------2---------

-1- -2- Status
 0   1  Not Covered
 1   0  Not Covered
 1   1  Not Covered

 LINE       112
 SUB-EXPRESSION (((!opb_valid)) && (opb_out != CDB_Data[k]))
                 -------1------    ------------2-----------

-1- -2- Status
 0   1  Not Covered
 1   0  Not Covered
 1   1  Not Covered

-------------------------------------------------------------------------------
Toggle Coverage for Module : testbench
                Total Covered Percent 
Totals          42    35      83.33   
Total Bits      1146  943     82.29   
Total Bits 0->1 573   471     82.20   
Total Bits 1->0 573   472     82.37   

                                 
Signals          42   35  83.33  
Signal Bits      1146 943 82.29  
Signal Bits 0->1 573  471 82.20  
Signal Bits 1->0 573  472 82.37  

Signal Details
                      Toggle Toggle 1->0 Toggle 0->1 
clock                 Yes    Yes         Yes         
reset                 Yes    Yes         Yes         
CDB_Data[2:0][31:0]   Yes    Yes         Yes         
CDB_PRF_idx[2:0][5:0] Yes    Yes         Yes         
CDB_valid[2:0]        Yes    Yes         Yes         
opa_in[31:0]          Yes    Yes         Yes         
opb_in[31:0]          Yes    Yes         Yes         
opa_valid             Yes    Yes         Yes         
opb_valid             No     Yes         No          
rd_mem_in             Yes    Yes         Yes         
wr_mem_in             Yes    Yes         Yes         
dest_PRF_idx_in[5:0]  Yes    Yes         Yes         
rob_idx_in[3:0]       Yes    Yes         Yes         
offset_in[15:0]       Yes    Yes         Yes         
PC_in[31:0]           Yes    Yes         Yes         
Operation_in[4:0]     Yes    Yes         Yes         
ready                 Yes    Yes         Yes         
opa_out[31:0]         No     No          No          
opb_out[31:0]         No     No          No          
dest_PRF_idx_out[5:0] Yes    Yes         Yes         
rob_idx_out[3:0]      Yes    Yes         Yes         
is_free               Yes    Yes         Yes         
PC_out[31:0]          Yes    Yes         Yes         
Operation_out[4:0]    Yes    Yes         Yes         
offset_out[15:0]      Yes    Yes         Yes         
rd_mem_out            Yes    Yes         Yes         
wr_mem_out            Yes    Yes         Yes         
PC[31:0]              No     No          No          
inst                  Yes    Yes         Yes         
rs1_value[31:0]       Yes    Yes         Yes         
rs2_value[31:0]       Yes    Yes         Yes         
rs1_prn[5:0]          Yes    Yes         Yes         
rs2_prn[5:0]          Yes    Yes         Yes         
test_start            No     No          No          
j[1:0]                Yes    Yes         Yes         
j[3:2]                No     No          No          
k[1:0]                Yes    Yes         Yes         
k[3:2]                No     No          No          
opa_out_correct[31:0] Yes    Yes         Yes         
opb_out_correct[31:0] Yes    Yes         Yes         
teststart             Yes    Yes         Yes         
correct               Yes    Yes         Yes         
wait_1[3:0]           Yes    Yes         Yes         
wait_2[3:0]           Yes    Yes         Yes         


-------------------------------------------------------------------------------
===============================================================================
Module Instance : testbench
===============================================================================

Instance :

SCORE  LINE   COND   TOGGLE 
 60.05  94.02   3.85  82.29 


Instance's subtree :

SCORE  LINE   COND   TOGGLE 
 70.82  95.65  32.00  84.81 


Module : 

SCORE  LINE   COND   TOGGLE NAME      
 60.05  94.02   3.85  82.29 testbench 


Parent : 

none
----------------


Subtrees :

SCORE  LINE   COND   TOGGLE NAME     
 83.37 100.00  62.50  87.60 rs_entry 



-------------------------------------------------------------------------------
Since this is the module's only instance, the coverage report is the same as for the module.
===============================================================================
Module : RS_Line
===============================================================================
SCORE  LINE   COND   TOGGLE 
 83.37 100.00  62.50  87.60 

Source File(s) : 

/afs/umich.edu/user/s/u/sunsusan/Desktop/group7w20/verilog/RS_Line.sv

Module self-instances :

SCORE  LINE   COND   TOGGLE NAME               
 83.37 100.00  62.50  87.60 testbench.rs_entry 



-------------------------------------------------------------------------------
Line Coverage for Module : RS_Line

             Line No.   Total   Covered  Percent
TOTAL                       44       44   100.00
ALWAYS             71       12       12   100.00
ALWAYS             91       16       16   100.00
ALWAYS            114       16       16   100.00

70                      //    $display("opb_reg_is_from_CDB:%b opb_valid_reg:%b CDB_valid:%b CDB_PRF_idx:%h opb_reg:%h",opb_reg_is_from_CDB,opb_valid_reg,CDB_valid,CDB_PRF_idx,opb_reg);
71         1/1                  opa_reg_feed = opa_reg;
72         1/1                  opb_reg_feed = opb_reg;
73         1/1                  opa_valid_reg_feed = opa_valid_reg;
74         1/1                  opb_valid_reg_feed = opb_valid_reg;
75         1/1                  if (~is_free) begin
76         1/1                      for (int i = 0; i < `WAYS; i = i + 1) begin
77         1/1                          if (opa_reg_is_from_CDB[i]) begin
78         1/1                              opa_reg_feed = CDB_Data[i];
79         1/1                              opa_valid_reg_feed = 1'b1;
80                                      end
                        MISSING_ELSE
81         1/1                          if (opb_reg_is_from_CDB[i]) begin
82         1/1                              opb_reg_feed = CDB_Data[i];
83         1/1                              opb_valid_reg_feed = 1'b1;
84                                      end
                        MISSING_ELSE
85                                  end
86                              end
                        MISSING_ELSE
87                          end
88                          
89                          always_ff @ (posedge clock) begin
90                      //    $display("reset: %h load_in: %h",reset,load_in);
91         1/1                  if (reset) begin
92         1/1                      is_free <= 1;
93         1/1                      opa_valid_reg <= 0;
94         1/1                      opb_valid_reg <= 0;
95         1/1                      opa_reg <= 0;
96         1/1                      opb_reg <= 0;
97                              end
98         1/1                  else if (load_in) begin
99         1/1                      is_free <= 0;
100        1/1                      opa_valid_reg <= opa_valid_in;
101        1/1                      opb_valid_reg <= opb_valid_in;
102        1/1                      opa_reg <= opa_in;
103        1/1                      opb_reg <= opb_in;
104                             end
105                             else begin
106        1/1                      opa_valid_reg <= opa_valid_reg_feed;
107        1/1                      opb_valid_reg <= opb_valid_reg_feed;
108        1/1                      opa_reg <= opa_reg_feed;
109        1/1                      opb_reg <= opb_reg_feed;
110                             end
111                         end
112                     
113                         always_ff @ (posedge clock) begin
114        1/1                  if (reset) begin
115        1/1                      PC_out <= 0;
116        1/1                      Operation_out <= ALU_ADD;
117        1/1                      offset_out <= 0;
118        1/1                      rd_mem_out <= 0;                          
119        1/1                      wr_mem_out <= 0; 
120        1/1                      dest_PRF_idx_out <= 0;
121        1/1                      rob_idx_out <= 0;
122                             end
123        1/1                  else if (load_in) begin
124        1/1                      PC_out <= PC_in;
125        1/1                      Operation_out <= Operation_in;
126        1/1                      offset_out <= offset_in;
127        1/1                      rd_mem_out <= rd_mem_in;                          
128        1/1                      wr_mem_out <= wr_mem_in; 
129        1/1                      dest_PRF_idx_out <= dest_PRF_idx_in;
130        1/1                      rob_idx_out <= rob_idx_in;
131                             end
                        MISSING_ELSE

-------------------------------------------------------------------------------
Cond Coverage for Module : RS_Line

               Total   Covered  Percent
Conditions         24       15    62.50
Logical            24       15    62.50
Non-Logical         0        0
Event               0        0

 LINE       64
 EXPRESSION (((~opa_valid_reg)) && CDB_valid[0] && (CDB_PRF_idx[0] == opa_reg))
             ---------1--------    ------2-----    -------------3-------------

-1- -2- -3- Status
 0   1   1  Not Covered
 1   0   1  Covered
 1   1   0  Not Covered
 1   1   1  Covered

 LINE       65
 EXPRESSION (((~opb_valid_reg)) && CDB_valid[0] && (CDB_PRF_idx[0] == opb_reg))
             ---------1--------    ------2-----    -------------3-------------

-1- -2- -3- Status
 0   1   1  Not Covered
 1   0   1  Covered
 1   1   0  Covered
 1   1   1  Covered

 LINE       64
 EXPRESSION (((~opa_valid_reg)) && CDB_valid[1] && (CDB_PRF_idx[1] == opa_reg))
             ---------1--------    ------2-----    -------------3-------------

-1- -2- -3- Status
 0   1   1  Not Covered
 1   0   1  Covered
 1   1   0  Not Covered
 1   1   1  Covered

 LINE       65
 EXPRESSION (((~opb_valid_reg)) && CDB_valid[1] && (CDB_PRF_idx[1] == opb_reg))
             ---------1--------    ------2-----    -------------3-------------

-1- -2- -3- Status
 0   1   1  Not Covered
 1   0   1  Covered
 1   1   0  Covered
 1   1   1  Covered

 LINE       64
 EXPRESSION (((~opa_valid_reg)) && CDB_valid[2] && (CDB_PRF_idx[2] == opa_reg))
             ---------1--------    ------2-----    -------------3-------------

-1- -2- -3- Status
 0   1   1  Not Covered
 1   0   1  Covered
 1   1   0  Not Covered
 1   1   1  Covered

 LINE       65
 EXPRESSION (((~opb_valid_reg)) && CDB_valid[2] && (CDB_PRF_idx[2] == opb_reg))
             ---------1--------    ------2-----    -------------3-------------

-1- -2- -3- Status
 0   1   1  Not Covered
 1   0   1  Covered
 1   1   0  Covered
 1   1   1  Covered

-------------------------------------------------------------------------------
Toggle Coverage for Module : RS_Line
                Total Covered Percent 
Totals          38    35      92.11   
Total Bits      1040  911     87.60   
Total Bits 0->1 520   455     87.50   
Total Bits 1->0 520   456     87.69   

                              
Ports          28  25  89.29  
Port Bits      764 635 83.12  
Port Bits 0->1 382 317 82.98  
Port Bits 1->0 382 318 83.25  

                                
Signals          10  10  100.00 
Signal Bits      276 276 100.00 
Signal Bits 0->1 138 138 100.00 
Signal Bits 1->0 138 138 100.00 

Port Details
                      Toggle Toggle 1->0 Toggle 0->1 Direction 
clock                 Yes    Yes         Yes         INPUT     
reset                 Yes    Yes         Yes         INPUT     
CDB_Data[2:0][31:0]   Yes    Yes         Yes         INPUT     
CDB_PRF_idx[2:0][5:0] Yes    Yes         Yes         INPUT     
CDB_valid[2:0]        Yes    Yes         Yes         INPUT     
opa_in[31:0]          Yes    Yes         Yes         INPUT     
opb_in[31:0]          Yes    Yes         Yes         INPUT     
opa_valid_in          Yes    Yes         Yes         INPUT     
opb_valid_in          No     Yes         No          INPUT     
rd_mem_in             Yes    Yes         Yes         INPUT     
wr_mem_in             Yes    Yes         Yes         INPUT     
dest_PRF_idx_in[5:0]  Yes    Yes         Yes         INPUT     
rob_idx_in[3:0]       Yes    Yes         Yes         INPUT     
load_in               Yes    Yes         Yes         INPUT     
offset_in[15:0]       Yes    Yes         Yes         INPUT     
PC_in[31:0]           Yes    Yes         Yes         INPUT     
Operation_in[4:0]     Yes    Yes         Yes         INPUT     
ready                 Yes    Yes         Yes         OUTPUT    
opa_out[31:0]         No     No          No          OUTPUT    
opb_out[31:0]         No     No          No          OUTPUT    
dest_PRF_idx_out[5:0] Yes    Yes         Yes         OUTPUT    
rob_idx_out[3:0]      Yes    Yes         Yes         OUTPUT    
is_free               Yes    Yes         Yes         OUTPUT    
PC_out[31:0]          Yes    Yes         Yes         OUTPUT    
Operation_out[4:0]    Yes    Yes         Yes         OUTPUT    
offset_out[15:0]      Yes    Yes         Yes         OUTPUT    
rd_mem_out            Yes    Yes         Yes         OUTPUT    
wr_mem_out            Yes    Yes         Yes         OUTPUT    

Signal Details
                         Toggle Toggle 1->0 Toggle 0->1 
opa_reg_is_from_CDB[2:0] Yes    Yes         Yes         
opb_reg_is_from_CDB[2:0] Yes    Yes         Yes         
opa_valid_reg            Yes    Yes         Yes         
opb_valid_reg            Yes    Yes         Yes         
opa_reg[31:0]            Yes    Yes         Yes         
opb_reg[31:0]            Yes    Yes         Yes         
opa_reg_feed[31:0]       Yes    Yes         Yes         
opb_reg_feed[31:0]       Yes    Yes         Yes         
opa_valid_reg_feed       Yes    Yes         Yes         
opb_valid_reg_feed       Yes    Yes         Yes         


-------------------------------------------------------------------------------
===============================================================================
Module Instance : testbench.rs_entry
===============================================================================

Instance :

SCORE  LINE   COND   TOGGLE 
 83.37 100.00  62.50  87.60 


Instance's subtree :

SCORE  LINE   COND   TOGGLE 
 83.37 100.00  62.50  87.60 


Module : 

SCORE  LINE   COND   TOGGLE NAME    
 83.37 100.00  62.50  87.60 RS_Line 


Parent : 

SCORE  LINE   COND   TOGGLE NAME      
 60.05  94.02   3.85  82.29 testbench 


Subtrees :


no children
----------------


-------------------------------------------------------------------------------
Since this is the module's only instance, the coverage report is the same as for the module.
